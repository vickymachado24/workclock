spring.application.name=work-service
spring.main.web-application-type=reactive
#security
spring.security.user.name=user
spring.security.user.password=password


#data
spring.jpa.database-platform=org.hibernate.dialect.PostgreSQLDialect
spring.datasource.url=jdbc:postgresql://localhost:5432/workclock
spring.datasource.username=postgres
spring.datasource.password=postgres


#data
spring.jpa.hibernate.ddl-auto=update

#server port
server.port=0

#eureka-client
eureka.client.serviceUrl.defaultZone=http://eureka:password@localhost:8761/eureka
eureka.instance.instance-id=${spring.application.name}:${random.int}


#circuit breaking for actuator
management.health.circruitbreakers.enabled=true
management.endpoints.web.exposure.include=*
management.endpoint.health.show-details=always


#resilience4j props
#to show states and health indicator
resilience4j.circuitbreaker.instances.task.registerHealthIndicator=true
#events buffers
resilience4j.circuitbreaker.instances.task.event-consumer-buffer-size=10
#wont change directly, which strategy to use for predication
resilience4j.circuitbreaker.instances.task.slidingWindowType=COUNT_BASED
#the predicate to change the states after number of calls failed
resilience4j.circuitbreaker.instances.task.slidingWindowSize=5
#threholding at percentages
resilience4j.circuitbreaker.instances.task.failureRateThreshold=50
#wait for 5 secs to change to half open state
resilience4j.circuitbreaker.instances.task.waitDurationInOpenState=5s
#max number of calls allowed, if still fails then go back to open state
resilience4j.circuitbreaker.instances.task.permittedNumberOfCallsInHalfOpenState=3
#transition to move from different states
resilience4j.circuitbreaker.instances.task.automaticTransitionFromOpenToHalfOpenEnabled=true

#resilience Timeout Properties
resilience4j.timelimiter.instances.task.timeout-duration=3s


#Resilience4J Retry Properties
resilience4j.retry.instances.task.max-attempts=3
resilience4j.retry.instances.task.wait-duration=5s